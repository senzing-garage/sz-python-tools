#! /usr/bin/env python3
"""Upgrade a V3 or V4 Senzing SDK project to V4.x.x"""

import argparse
import shutil
import sys
from contextlib import suppress
from pathlib import Path
from time import sleep
from typing import Any

from _project_helpers import (
    PERMISSIONS,
    PERMISSIONS_2,
    SZ_SYS_PATH,
    V3_BACKUP_PATH,
    V4_BUILD,
    V4_SYS_BUILD,
    V4_SYS_PATH,
    SzBuildDetails,
    get_build_details,
    set_permissions,
    setup_env,
)

INPUT_CONFS = ("y", "Y", "yEs", "yES", "YES", "yes", "YEs", "yeS", "Yes", "YeS")
MODULE_NAME = Path(__file__).stem
V3_BUILD = "g2BuildVersion.json"
V3_SYS_PATH = SZ_SYS_PATH / "g2"
V3_SYS_BUILD = V3_SYS_PATH / V3_BUILD
UPGRADE_URL = "https://www.senzing.com/docs/4_beta/index.html"

V3_BACKUP_PROJ = {
    "bin": {"files": ["g2dbencrypt", "g2saltadm", "g2ssadm"], "excludes": []},
    "etc": {"files": ["senzing_governor.py"], "excludes": []},
    "lib": {"files": ["libSpaceTimeBoxStandardizer.so", "libG2Hasher.so", "libG2SSAdm.so"], "excludes": []},
    "python": {
        "files": ["*"],
        "excludes": [
            "CompressedFile.py",
            "DumpStack.py",
            "G2Audit.py",
            "G2Command.py",
            "G2ConfigTables.py",
            "G2ConfigTool.py",
            "G2Database.py",
            "G2Explorer.py",
            "G2Export.py",
            "G2IniParams.py",
            "G2Loader.py",
            "G2Paths.py",
            "G2Project.py",
            "G2S3.py",
            "G2SetupConfig.py",
            "G2Snapshot.py",
            "SenzingGo.py",
            "senzing",
        ],
    },
    "setupEnv": {"files": [], "excludes": []},
    "g2BuildVersion.json": {"files": [], "excludes": []},
}

V3_REMOVE_FROM_PROJ = {
    "bin": {"files": ["g2configupgrade", "g2dbencrypt", "g2dbupgrade", "g2saltadm", "g2ssadm"], "excludes": ["bin"]},
    "data": {"files": [], "excludes": []},
    "etc": {"files": ["senzing_governor.py"], "excludes": []},
    "lib": {
        "files": [
            "g2.jar",
            "libG2*.so",
            "libG2Hasher.so",
            "libG2SSAdm.so",
            "libg2CompJavaScoreSet.so",
            "libg2DistinctFeatJava.so",
            "libg2EFeatJava.so",
            "libg2JVMPlugin.so",
            "libg2StdJava.so",
            "libmariadbplugin.so",
            "libSpaceTimeBoxStandardizer.so",
        ],
        "excludes": ["lib"],
    },
    "python": {"files": ["*"], "excludes": []},
    "resources/config": {"files": ["g2core-configuration-upgrade-*.gtc"], "excludes": []},
    "resources/schema": {"files": ["g2core-schema-*-create.sql", "g2core-schema-*-upgrade-*.sql"], "excludes": []},
    "resources/templates": {
        "files": [
            "G2C.db*",
            "G2Module.ini",
            "cfgVariant.json",
            "custom*.txt",
            "defaultGNRCP.config",
            "g2config.json",
            "senzing_governor.py",
            "setupEnv",
            "stb.config",
        ],
        "excludes": [],
    },
    "sdk": {"files": ["*"], "excludes": []},
    "setupEnv": {"files": [], "excludes": []},
}

COPY_TO_PROJ = {
    "er/": {"files": ["*"], "excludes": ["sz_create_project", "sz_update_project"]},
    "data": {"files": ["*"], "excludes": []},
}

V3_RENAME_IN_PROJ = {
    "etc": {"from": "G2Module.ini", "to": "sz_engine_config.ini"},
}

# pylint: disable=W0106


def parse_cli_args() -> argparse.Namespace:
    """Parse the CLI arguments"""
    arg_parser = argparse.ArgumentParser(
        allow_abbrev=False,
        description="Update an existing V3 or V4 Senzing project to the system installed V4 of Senzing.",
    )
    arg_parser.add_argument(
        "project_path",
        metavar="path",
        help="Path of the project to update",
    )
    arg_parser.add_argument(
        "-f",
        "--force",
        dest="force_mode",
        default=False,
        action="store_true",
        help="Upgrade without prompts. WARNING: Use with caution, ensure you have a backup of the project",
    )
    return arg_parser.parse_args()


def dir_listing(path: Path) -> list[Path]:
    """Get a listing of the specified path to check for files or directories"""
    try:
        listing = list(path.iterdir())
    except OSError as err:
        if type(err).__name__ == "NotADirectoryError":
            print(f"\nERROR: {path} is not a directory, expecting one")
        print(f"\nERROR: {err}")
        sys.exit(1)

    return listing


def pre_check(project_path: Path) -> tuple[SzBuildDetails, SzBuildDetails]:
    """Check not trying to overwrite the V4 Senzing system install, that path is a project, and versions are correct"""
    if not V4_SYS_PATH.exists():
        print(f"\nERROR: Couldn't locate Senzing SDK V4 system install at {V4_SYS_PATH}")
        sys.exit(1)

    if str(project_path).startswith(str(SZ_SYS_PATH)):
        print(f"\nERROR: {project_path} is the Senzing system installation, not a Senzing project")
        sys.exit(1)

    v3_project_build_file = project_path / V3_BUILD
    v4_project_build_file = project_path / V4_BUILD
    proj_listing = dir_listing(project_path)
    if v3_project_build_file not in proj_listing and v4_project_build_file not in proj_listing:
        print(f"\nERROR: {project_path} isn't a Senzing project, expected it to contain either:")
        print(f"\tExisting V3 project: {v3_project_build_file}")
        print(f"\tExisting V4 project: {v4_project_build_file}")
        sys.exit(1)

    try:
        proj_build_file = v3_project_build_file if v3_project_build_file in proj_listing else v4_project_build_file
        proj_build = get_build_details(proj_build_file)
        sys_build = get_build_details(V4_SYS_BUILD)
    except (OSError, TypeError) as err:
        print(f"\nERROR: Trying to read {proj_build_file} or {V4_SYS_BUILD} to collect version information: {err}")
        sys.exit(1)

    if proj_build.major not in (3, 4) or sys_build.major != 4:
        print(f"\nERROR: {MODULE_NAME} updates a V3 project to V4, or V4.n.n to a newer release")
        print(f"\tProject version: {proj_build.build_version}")
        print(f"\tSystem install version: {sys_build.build_version}")
        sys.exit(1)

    if sys_build < proj_build:
        print("\nNo update required, project is newer than the system install")
        print(f"\tProject version: {proj_build.build_version}")
        print(f"\tSystem install version: {sys_build.build_version}")
        sys.exit(0)

    if sys_build.build_version == proj_build.build_version:
        print(f"\nNo update required, project & system install are the same version: {proj_build.build_version}")
        sys.exit(0)

    return (proj_build, sys_build)


def remove_dir(dir_: Path, excludes: list[Path]) -> None:
    """Recursively remove a directory"""
    try:
        for path in dir_.iterdir():
            if path in excludes:
                continue
            path.unlink(missing_ok=True) if (path.is_file() or path.is_symlink()) else remove_dir(path, excludes)

        if not excludes:
            with suppress(FileNotFoundError):
                dir_.rmdir()
    except OSError as err:
        raise OSError(f"Couldn't remove directory: {err}") from err


def remove_files_dirs(to_remove: dict[str, Any], target_dir: Path) -> None:
    """Remove files/directories that are no longer required"""
    for r_path, r_dict in to_remove.items():
        target: Path = target_dir / r_path
        files = r_dict["files"]
        excludes = [target / e for e in r_dict["excludes"]]

        try:
            if target.is_dir():
                if not files or (files and files[0] == "*"):
                    remove_dir(target, excludes)

                if files and files[0] != "*":
                    target_files = []
                    for f in files:
                        target_files.append(target / f) if "*" not in f else target_files.extend(list(target.glob(f)))

                    for target_file in target_files:
                        target_file.unlink(missing_ok=True)

            if target.is_file() or target.is_symlink():
                target.unlink(missing_ok=True)
        except OSError as err:
            raise OSError(f"Couldn't delete a file or directory: {err}") from err


def copy_files_dirs(to_copy: dict[str, Any], source_dir: Path, target_dir: Path) -> None:
    """Copy files/directories within and to a project"""
    for c_path, c_dict in to_copy.items():
        excludes = c_dict["excludes"]
        files = c_dict["files"]
        source = source_dir / c_path

        try:
            if source.is_dir():
                # If the key in to_copy ends with / copy everything in source dir to target_dir
                #     er/ as the key copies everything from /opt/senzing/er to target_dir
                #
                # If the key in to_copy doesn't end with / copy source dir and everything in it to target_dir
                #     data as the key copies /opt/senzing/data to target_dir/data
                target = target_dir if c_path.endswith("/") else target_dir / c_path

                # Copy entire contents of the source directory
                if not files or (files and files[0] == "*"):
                    shutil.copytree(source, target, ignore=shutil.ignore_patterns(*excludes), dirs_exist_ok=True)

                # Create the source directory in the target and only copy listed files
                if files and files[0] != "*":
                    target.mkdir(exist_ok=True, parents=True)
                    for source_file in [source / f for f in files]:
                        shutil.copy(source_file, target / source_file.name)

            if source.is_file():
                # Single file copy always copies only the file, if the key to to_copy is er/szBuildVersion.json
                # szBuildVersion.json is copied to target_dir and not target_dir/er/szBuildVersion.json
                target = target_dir / source.name
                shutil.copy(source, target)
        except OSError as err:
            raise OSError(f"Couldn't copy a file or directory: {err}") from err


def rename_files(to_rename: dict[str, dict[str, str]], target_dir: Path) -> None:
    """Rename existing project files that had a name change"""

    try:
        for r_path, r_dict in to_rename.items():
            current = target_dir / r_path / r_dict["from"]
            new = target_dir / r_path / r_dict["to"]
            with suppress(FileNotFoundError):
                current.rename(new)
    except OSError as err:
        raise OSError(f"Couldn't rename a file or directory: {err}") from err


def main() -> None:
    """main"""
    cli_args = parse_cli_args()
    proj_path = Path(cli_args.project_path).expanduser().resolve()
    proj_build, sys_build = pre_check(proj_path)
    proj_is_v3 = bool(proj_build.major == 3)

    if not cli_args.force_mode:
        print("\nWARNING: If you don't have a backup of the project, create one before continuing!")
        sleep(3)
        if (
            input(f"\nUpdate the project from version {proj_build.build_version} to {sys_build.build_version}? (y/n) ")
            not in INPUT_CONFS
        ):
            sys.exit(0)
        print("\nUpdating...")
    else:
        print(f"\nUpdating project from version {proj_build.build_version} to {sys_build.build_version}...")

    try:
        if proj_is_v3:
            v3_backup_path = proj_path / V3_BACKUP_PATH
            v3_backup_path.mkdir(exist_ok=True)
            copy_files_dirs(V3_BACKUP_PROJ, proj_path, v3_backup_path)
            rename_files(V3_RENAME_IN_PROJ, proj_path)
            remove_files_dirs(V3_REMOVE_FROM_PROJ, proj_path)
        copy_files_dirs(COPY_TO_PROJ, SZ_SYS_PATH, proj_path)
        if proj_is_v3:
            setup_env(proj_path)
        set_permissions(proj_path, PERMISSIONS)
        set_permissions(proj_path, PERMISSIONS_2)
    except (OSError, TypeError) as err:
        if proj_is_v3:
            shutil.copytree(v3_backup_path, proj_path, dirs_exist_ok=True)
        print(f"\nERROR: {err}")
        print("\nIf the error is file or directory permission related, run again with appropriate privileges")
        print(
            "\nIf the error is missing file or directory, check senzingsdk-setup, senzingsdk-tools, and senzingsdk-poc are installed"
        )
    else:
        if proj_is_v3:  # Only delete if no errors so re-running can find the file again
            proj_path.joinpath(V3_BUILD).unlink(missing_ok=True)

        print(f"\nProject successfully updated. Refer to {UPGRADE_URL} for additional upgrade instructions")


if __name__ == "__main__":
    main()
