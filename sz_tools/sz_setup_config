#! /usr/bin/env python3
"""# TODO """

import argparse
import pathlib
import sys

from _tool_helpers import get_engine_config, print_error
from senzing_core import SzAbstractFactory, SzError

MODULE_NAME = pathlib.Path(__file__).stem


def parse_cli_args() -> argparse.Namespace:
    """# TODO"""
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument(
        "-c",
        "--iniFile",
        dest="ini_file_name",
        default=None,
        help="Path and file name of optional G2Module.ini to use",
    )
    # Run in non-interactive mode for Senzing team testing
    arg_parser.add_argument("-a", "--auto", action="store_true", help=argparse.SUPPRESS)

    return arg_parser.parse_args()


def main() -> None:
    """# TODO"""
    cli_args = parse_cli_args()

    # Check an engine configuration can be located
    engine_config = get_engine_config(cli_args.ini_file_name)

    # Determine if a default/initial Senzing configuration exists
    try:
        sz_abstract_factory = SzAbstractFactory(MODULE_NAME, engine_config)
        sz_config_mgr = sz_abstract_factory.create_configmanager()
        default_config_id = sz_config_mgr.get_default_config_id()
    except SzError as err:
        print_error(f"Could not initialize SzConfigManager or get default configuration ID: {err}", exit_=True)

    # If not in auto mode prompt user
    if not cli_args.auto:
        if default_config_id:
            if not input(
                "\nA configuration document already exists in the datastore. Do you want to replace it? (y/n)  "
            ).lower() in ("y", "yes"):
                sys.exit(1)
        else:
            if not input(
                "\nInstalling template configuration to the datastore. Do you want to continue? (y/n)  "
            ).lower() in ("y", "yes"):
                sys.exit(1)

    # Apply a default configuration
    try:
        sz_config = sz_abstract_factory.create_config()
        config_handle = sz_config.create_config()
        new_config = sz_config.export_config(config_handle)
        sz_config.close_config(config_handle)
    except SzError as err:
        print_error(f"Could not get a template configuration: {err}", exit_=True)

    # Save configuration JSON into Senzing database.
    try:
        new_config_id = sz_config_mgr.add_config(new_config, f"Configuration added by {MODULE_NAME}")
    except SzError as err:
        print_error(f"Failed to add configuration to the datastore: {err}", exit_=True)

    # Set the default configuration ID.
    try:
        sz_config_mgr.set_default_config_id(new_config_id)
    except SzError as err:
        print_error(f"Failed to set configuration as default: {err}", exit_=True)

    print("\nConfiguration successfully added")


if __name__ == "__main__":
    main()
