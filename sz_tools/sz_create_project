#! /usr/bin/env python3
"""Create a Senzing SDK project"""

import argparse
import sys
from pathlib import Path

from _project_helpers import (
    COPY_TO_PROJ,
    PERMISSIONS,
    PERMISSIONS_2,
    SZ_SYS_PATH,
    V4_SYS_BUILD,
    copy_files_dirs,
    get_build_details,
    set_permissions,
    setup_env,
)

COPY_TO_ETC = {"er/resources/templates/": {"files": ["*"], "excludes": ["G2C.*", "setupEnv", "g2config.json"]}}
COPY_TO_VAR: dict[str, dict[str, list[str]]] = {"er/resources/templates/G2C.db": {"files": [], "excludes": []}}


def parse_cli_args() -> argparse.Namespace:
    """Parse the CLI arguments"""
    arg_parser = argparse.ArgumentParser(
        allow_abbrev=False,
        description=" Create a new instance of a Senzing project",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    arg_parser.add_argument(
        "project_path",
        metavar="path",
        help="path to create new Senzing project in, it must not exist",
    )

    return arg_parser.parse_args()


def pre_check(project_path: Path) -> None:
    """Check not trying to overwrite the V4 Senzing system install and the path doesn't exist"""
    if str(project_path).startswith(str(SZ_SYS_PATH)):
        print(f"\nProject cannot be created in {SZ_SYS_PATH}")
        sys.exit(1)

    if project_path.exists():
        print(f"\n{project_path} exists, specify a different path")
        sys.exit(1)


def update_sz_engine_config(config_file: Path, project_path: Path) -> None:
    """Update sz_engine_config.ini with project paths"""
    try:
        with open(config_file, "r", encoding="utf-8") as in_:
            data = in_.read()

        data = (
            data.replace("${SENZING_DATA_DIR}", str(project_path / "data"))
            .replace("${SENZING_CONFIG_PATH}", str(project_path / "etc"))
            .replace("${SENZING_RESOURCES_DIR}", str(project_path / "resources"))
            .replace("${SENZING_VAR_DIR}", str(project_path / "var"))
        )

        with open(config_file, "w", encoding="utf-8") as out:
            out.write(data)
    except OSError as err:
        raise OSError(f"Couldn't update new {config_file}: {err}") from err


def main() -> None:
    """main"""
    cli_args = parse_cli_args()
    proj_path = Path(cli_args.project_path).expanduser().resolve()
    pre_check(proj_path)

    try:
        print(f"\nSenzing version: {get_build_details(V4_SYS_BUILD).version}\n")

        # Create project and copy main files
        copy_files_dirs(COPY_TO_PROJ, SZ_SYS_PATH, proj_path)

        # Create and copy to proj_path/etc
        copy_files_dirs(COPY_TO_ETC, SZ_SYS_PATH, proj_path / "etc")

        # Copy and modify setupEnv
        setup_env(proj_path)

        # Create proj_path/var/sqlite and copy G2C.db
        copy_files_dirs(COPY_TO_VAR, SZ_SYS_PATH, proj_path / "var" / "sqlite")

        # Modify sz_engine_config.ini
        update_sz_engine_config(proj_path / "etc" / "sz_engine_config.ini", proj_path)

        # Set permissions on the project
        set_permissions(proj_path, PERMISSIONS)
        set_permissions(proj_path, PERMISSIONS_2)
    except OSError as err:
        print(f"\nERROR: {err}")
    else:
        print("Successfully created")


if __name__ == "__main__":
    main()
